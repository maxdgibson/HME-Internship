import tkinter as tk
from tkinter import messagebox
import mysql.connector
from datetime import datetime

# Function to increase font size for all widgets
def increase_font_size(widget, size):
    font = widget['font']
    font_family = font.split(' ')[0]
    widget.configure(font=(font_family, size))

    if isinstance(widget, tk.OptionMenu):
        menu = widget['menu']
        for index in range(menu.index("end") + 1):
            menu.entryconfig(index, font=(font_family, size))

def insert_data():
    # Get the values from the input fields
    name = name_entry.get()
    id_number = id_entry.get()
    category = category_var.get()
    product = product_var.get()
    quantity = quantity_entry.get()
    shift = shift_var.get()
    quarter = quarter_var.get()
    comments = comments_entry.get()
    date = datetime.now().strftime('%Y-%m-%d')
    time = datetime.now().strftime('%H:%M:%S')

    # Check if any of the required fields are empty
    if not all([name, id_number, category, product, quantity, shift, quarter]):
        messagebox.showerror('Error', 'Please fill in all required fields.')
        return

    # Confirmation pop-up
    result = messagebox.askquestion('Confirmation', 'Are you sure you want to submit?', icon='warning')
    if result == 'no':
        return

    # Establish a connection to the MySQL server
    connection = mysql.connector.connect(
        #host='10.5.34.66',
        host='localhost',
        user='root',
        password='password',
        database='customer_quantity'
    )
    cursor = connection.cursor()

    # SQL statement to insert data
    sql = "INSERT INTO your_table (date, time, name, id_number, shift, quarter, category, product, quantity, comments) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"
    values = (date, time, name, id_number, shift, quarter, category, product, quantity, comments)

    # Execute the SQL statement
    cursor.execute(sql, values)
    connection.commit()

    # Show a success message
    messagebox.showinfo('Success', 'Data inserted successfully!')

    # Reset the input fields
    name_entry.delete(0, 'end')
    id_entry.delete(0, 'end')
    shift_var.set(shift_options[0])
    quarter_var.set(quarter_options[0])
    category_var.set(category_options[0])
    product_var.set('Select Product')
    quantity_entry.delete(0, 'end')
    comments_entry.delete(0, 'end')

    # Close the cursor and connection
    cursor.close()
    connection.close()

def update_product_options(*args):
    selected_category = category_var.get()

    # Clear the current product options
    product_dropdown['menu'].delete(0, 'end')

    # Determine the product options based on the selected category
    if selected_category == 'Bases':
        product_options = ['BS6X00', 'BS6000', 'BS7X00', 'Console', 'Router', 'Pro Aud']
    elif selected_category == 'PCB':
        product_options = ['PCBHS6', 'PRGPCBAIO', 'PCBHS7', 'PCBCHG', 'PCBBSX', 'PCBIB7']
    elif selected_category == 'Nexeo':
        product_options = ['RT7000', 'IB7000', 'SM7000']
    elif selected_category == 'CU/TSP':
        product_options = ['CU TEST', 'CU50', 'TSP TEST', 'PCBTSP']
    else:
        product_options = []

    # Set the default option
    product_var.set('')
    if product_options:
        product_var.set(product_options[0])

    # Add the product options to the dropdown menu
    for option in product_options:
        product_dropdown['menu'].add_command(label=option, command=tk._setit(product_var, option))

# Create the main window
window = tk.Tk()
window.title('Data Entry Form')
window.geometry('1800x500')
# Increase the font size for all labels and entry fields
font_size = 40

# Create a label and entry for the name
name_label = tk.Label(window, text='Name:')
name_label.grid(row=0, column=0, padx=10, pady=10, sticky='e')
increase_font_size(name_label, font_size)

name_entry = tk.Entry(window, width=20)
name_entry.grid(row=0, column=1, padx=10, pady=10, sticky='w')
increase_font_size(name_entry, font_size)

# Create a label and entry for the ID number
id_label = tk.Label(window, text='ID Number:')
id_label.grid(row=0, column=2, padx=10, pady=10, sticky='e')
increase_font_size(id_label, font_size)

id_entry = tk.Entry(window, width=20)
id_entry.grid(row=0, column=3, padx=10, pady=10, sticky='w')
increase_font_size(id_entry, font_size)

# Create a label and entry for the quantity
quantity_label = tk.Label(window, text='Quantity:')
quantity_label.grid(row=3, column=0, padx=10, pady=10, sticky='e')
increase_font_size(quantity_label, font_size)

quantity_entry = tk.Entry(window, width=20)
quantity_entry.grid(row=3, column=1, padx=10, pady=10, sticky='w')
increase_font_size(quantity_entry, font_size)

# Create a label and entry for the comments
comments_label = tk.Label(window, text='Comments:')
comments_label.grid(row=3, column=2, padx=10, pady=10, sticky='e')
increase_font_size(comments_label, font_size)

comments_entry = tk.Entry(window, width=20)
comments_entry.grid(row=3, column=3, padx=10, pady=10, sticky='w')
increase_font_size(comments_entry, font_size)

# Create a label, dropdown, and trace for the category
category_label = tk.Label(window, text='Category:')
category_label.grid(row=1, column=2, padx=10, pady=10, sticky='e')
increase_font_size(category_label, font_size)

category_options = ['Bases', 'PCB', 'Nexeo', 'CU/TSP']
category_var = tk.StringVar(window)
category_var.set(category_options[0])
category_dropdown = tk.OptionMenu(window, category_var, *category_options)
category_dropdown.configure(fg='dark green')
category_dropdown.grid(row=1, column=3, padx=10, pady=10, sticky='w')
increase_font_size(category_dropdown, font_size)

category_var.trace_add('write', update_product_options)

# Create a label, dropdown, and default value for the product
product_label = tk.Label(window, text='Product:')
product_label.grid(row=2, column=2, padx=10, pady=10, sticky='e')
increase_font_size(product_label, font_size)

product_var = tk.StringVar(window)
product_var.set('Select Product')
product_dropdown = tk.OptionMenu(window, product_var, 'Select Product')
product_dropdown.configure(fg='dark green')
product_dropdown.grid(row=2, column=3, padx=10, pady=10, sticky='w')
increase_font_size(product_dropdown, font_size)

# Create a label, dropdown, and default value for the shift
shift_label = tk.Label(window, text='Shift:')
shift_label.grid(row=1, column=0, padx=10, pady=10, sticky='e')
increase_font_size(shift_label, font_size)

shift_options = ['1st Shift', '2nd Shift']
shift_var = tk.StringVar(window)
shift_var.set(shift_options[0])
shift_dropdown = tk.OptionMenu(window, shift_var, *shift_options)
shift_dropdown.configure(fg='dark blue')
shift_dropdown.grid(row=1, column=1, padx=10, pady=10, sticky='w')
increase_font_size(shift_dropdown, font_size)

# Create a label, dropdown, and default value for the quarter
quarter_label = tk.Label(window, text='Quarter:')
quarter_label.grid(row=2, column=0, padx=10, pady=10, sticky='e')
increase_font_size(quarter_label, font_size)

quarter_options = ['Q1', 'Q2', 'Q3', 'Q4']
quarter_var = tk.StringVar(window)
quarter_var.set(quarter_options[0])
quarter_dropdown = tk.OptionMenu(window, quarter_var, *quarter_options)
quarter_dropdown.configure(fg='dark blue')
quarter_dropdown.grid(row=2, column=1, padx=10, pady=10, sticky='w')
increase_font_size(quarter_dropdown, font_size)

# Create a button to submit the data
submit_button = tk.Button(window, text='Submit', command=insert_data, bg='light green')
submit_button.grid(row=4, column=0, columnspan=4, padx=10, pady=10)
increase_font_size(submit_button, font_size)

# Center all widgets
for widget in window.winfo_children():
    widget.grid_configure(padx=10, pady=10, sticky='nsew')

# Run the main event loop
window.mainloop()
